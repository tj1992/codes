#include<iostream>
#include<algorithm>
#include<vector>
#include<cmath>

using namespace std;


struct node
{
	int x;	int y;
	int clas;
	int node_number;

};

struct tj
{
	double dist;
	int clas;
};

 bool operator < (const tj &a,const  tj &b)
{
	return a.dist < b.dist;
}

vector<node>n1;

int find_min(vector<tj>t,int k)
{
	if (k > 100)
		cerr<<"k greater than 100";
	int ar[100];
	for(int i =0;i<k;i++)
		ar[i]=0;
	int max = 0;
	int index = 0;

	for(unsigned i =0;i<t.size();i++)
		ar[t[i].clas]++;

	max = ar[0];
	index = 0;
	for(int i  = 1 ;i <k;i++)
		if(max < ar[i]) {
			max  = ar[i];
			index = i;
		}

	return index;
}

void print_vector (vector<tj>& tt) {
	for (int i = 0; i < tt.size(); ++i)
		cout<<tt[i].clas<<' '<<tt[i].dist<<'\n';
}


void dist(int k,int next )
{
	vector<tj>tt(k);

	for(int i =0;i<k;i++)
	{
		tt[i].dist = ((n1[next].x - n1[i].x)*(n1[next].x - n1[i].x)+(n1[next].y - n1[i].y)*(n1[next].y - n1[i].y));


		tt[i].clas = n1[i].clas;

	}
	cout<<"Before sort:\n";
	print_vector (tt);
	sort(tt.begin(),tt.end());
	cout<<"\nAfter sort:\n";
	print_vector (tt);
	int x = find_min(tt,k);
	//cout<<"hello"<<n1[next].node_number<<'\t'<<x<<'\n';
	n1[next].clas = x;

}



int main()
{

	int n,k;
	n = 10;
	k = 2;
	cin>>n>>k;


	n1.resize(n);
	for(int i =0;i < n;i++)
	{
		cin>>n1[i].x;
		cin>>n1[i].y;
		n1[i].clas = i;
		n1[i].node_number =i;
	}


	for(int i = 0;i < n-k;i++)
	{
		int next = i+k;
		dist(next-1,next);
	}

	for(int i =0;i < n;i++)
		cout<<n1[i].node_number<<'\t'<<n1[i].clas<<'\n';
}













































